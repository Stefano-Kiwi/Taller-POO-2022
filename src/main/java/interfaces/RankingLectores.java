package interfaces;

import acceso.Bibliotecario;
import acceso.DatosDeAcceso;
import acceso.Lector;
import acceso.Multa;
import inventario.Almacenamiento;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.table.DefaultTableModel;


public class RankingLectores extends javax.swing.JFrame {

    /**
     * Creates new form RankingLectores
     */
    Bibliotecario bibliotecario;

    public RankingLectores() {
        initComponents();
        cargarDatos();
        this.setLocationRelativeTo(null);
    }

    public RankingLectores(Bibliotecario b) {
        initComponents();
        cargarDatos();
        this.setLocationRelativeTo(null);
        bibliotecario = b;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        rankingTabla = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rankingTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Lector", "DNI", "Multas"
            }
        ));
        jScrollPane1.setViewportView(rankingTabla);

        jButton1.setText("Volver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 659, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        new Administracion(bibliotecario).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RankingLectores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RankingLectores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RankingLectores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RankingLectores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RankingLectores().setVisible(true);
            }
        });
    }

    /**
     * Este método sirve para crear una tabla con un modelo solicitado y muestra
     * por pantalla aquellos lectores, en orden descendente, que han tenido
     * multas según la cantidad de las mismas
     */
    public void cargarDatos() {

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Lector");
        modelo.addColumn("DNI");
        modelo.addColumn("Multas");
        rankingTabla.setModel(modelo);

        //Creamos de manaera manual bla bla etc
        Almacenamiento a = new Almacenamiento();
        DatosDeAcceso datos = new DatosDeAcceso();

        datos.obtenerLectores("recursos/ListadoDeLectores.txt");
        a.obtenerMultas("recursos/ListaMultas.txt");
        List<Multa> multas = a.getMultas();
        List<Lector> lectores = datos.getLectores();

        List<String> multados = new ArrayList();
        List<Lector> lectors = new ArrayList();

        for (Multa multa : multas) {
            if (!multados.contains(multa.getLector().tablaGUIRanking())) {
                multados.add(multa.getLector().tablaGUIRanking());
            }

        }

        for (Multa multa : multas) {
            if (!lectors.contains(multa.getLector())) {
                lectors.add(multa.getLector());
            }
        }
        Collections.sort(lectors);

        for (Lector lector : lectors) {
            String[] campos = lector.tablaGUIRanking().split(",");
            modelo.addRow(campos);
        }

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable rankingTabla;
    // End of variables declaration//GEN-END:variables
}
