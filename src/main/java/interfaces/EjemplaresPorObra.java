package interfaces;

import inventario.Almacenamiento;
import inventario.Ejemplar;
import inventario.Obra;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel Altamirano
 */
public class EjemplaresPorObra extends javax.swing.JFrame {

    /**
     * Creates new form EjemplaresPorObra
     */
    Almacenamiento a = new Almacenamiento();
    boolean esConsulta = false;
    
    
    public EjemplaresPorObra() {
        initComponents();
        cargarDatos();
        this.setLocationRelativeTo(null);

    }
    
    public EjemplaresPorObra(boolean consulta) {
        initComponents();
        cargarDatos();
        this.setLocationRelativeTo(null);
        this.esConsulta = consulta;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablaEjemplar = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        ComboBoxTitulo = new javax.swing.JComboBox<>();
        jButtonVolver = new javax.swing.JButton();
        areaTematicaLabel = new javax.swing.JLabel();
        areaTematicaCB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablaEjemplar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Obra", "Lugar del ejemplar"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaEjemplar);

        jLabel1.setText("Ejemplares total de la biblioteca:");

        ComboBoxTitulo.setToolTipText("");
        ComboBoxTitulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxTituloActionPerformed(evt);
            }
        });

        jButtonVolver.setText("Volver");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        areaTematicaLabel.setText("Ejemplares disponibles del Área:");

        areaTematicaCB.setToolTipText("");
        areaTematicaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaTematicaCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButtonVolver))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 945, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(ComboBoxTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(areaTematicaLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(areaTematicaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(areaTematicaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(areaTematicaCB)
                    .addComponent(ComboBoxTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addGap(37, 37, 37)
                .addComponent(jButtonVolver)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ComboBoxTituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxTituloActionPerformed

        /**
         *
         * @author Luciano Aguilar
         *  Al seleccionar la opcioón en ComboBox saldra la informacion requerida en la tabla
         */
        String opcionElegida = ComboBoxTitulo.getSelectedItem().toString();

        a.obtenerEjemplares("recursos/ListadoDeEjemplares.txt");

        List<Ejemplar> ejemplares = a.getEjemplares();

        List<Ejemplar> ejemplaresAMostrar = new ArrayList();

        //CORRECCION SOLO PIDO EL TITULO DE LA OBRA DEL EJEMPLAR Y COMPARO CON LA OPCION ELEGIDA
        if(opcionElegida == ""){
            new JOptionPane().showMessageDialog(rootPane, "Seleccionar opción");
        }
        for (Ejemplar ejemplar : ejemplares) {
            if (ejemplar.getObra().getTitulo().equals(opcionElegida)) {
                ejemplaresAMostrar.add(ejemplar);
            }
        }

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Obra");
        modelo.addColumn("Lugar del ejemplar");
        TablaEjemplar.setModel(modelo);

        for (Ejemplar ejemplar : ejemplaresAMostrar) {
            String[] campos = ejemplar.tablaGUI().split(",");
            modelo.addRow(campos);
        }

    }//GEN-LAST:event_ComboBoxTituloActionPerformed
   
    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        this.setVisible(false);
        if(esConsulta==true){
            new Consultas().setVisible(true);
        }else{
            new Administracion().setVisible(true);
        }
        
    }//GEN-LAST:event_jButtonVolverActionPerformed

    private void areaTematicaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaTematicaCBActionPerformed
       
        String opcionElegida = areaTematicaCB.getSelectedItem().toString();

        a.obtenerEjemplares("recursos/ListadoDeEjemplares.txt");

        List<Ejemplar> ejemplares = a.getEjemplarDisponibles();

        List<Ejemplar> ejemplaresAMostrar = new ArrayList();

        //CORRECCION SOLO PIDO EL TITULO DE LA OBRA DEL EJEMPLAR Y COMPARO CON LA OPCION ELEGIDA
        if(opcionElegida == ""){
            new JOptionPane().showMessageDialog(rootPane, "Seleccionar opción");
        }
        for (Ejemplar ejemplar : ejemplares) {
            if (ejemplar.getObra().getAreaTematica().equals(opcionElegida)) {
                ejemplaresAMostrar.add(ejemplar);
            }
        }

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Obra");
        modelo.addColumn("Lugar del ejemplar");
        TablaEjemplar.setModel(modelo);

        for (Ejemplar ejemplar : ejemplaresAMostrar) {
            String[] campos = ejemplar.tablaGUI().split(",");
            modelo.addRow(campos);
        }
    }//GEN-LAST:event_areaTematicaCBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EjemplaresPorObra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EjemplaresPorObra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EjemplaresPorObra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EjemplaresPorObra.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EjemplaresPorObra().setVisible(true);
            }
        });
    }

    public void cargarDatos() {

        a.obtenerObras("recursos/ListadoDeObras.txt");

        List<Obra> obras = a.getObras();

        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Obra");
        modelo.addColumn("Lugar del ejemplar");
        TablaEjemplar.setModel(modelo);

        List<String> nombreDeObras = new ArrayList();
        
        //Lista para guardar las areas temáticas
        List<String> areasTematicas = new ArrayList();
        
        for (Obra obraNombre : obras) {
            if (!nombreDeObras.contains(obraNombre.getTitulo())) {
                nombreDeObras.add(obraNombre.getTitulo());
            }
        }
        
        //obtengo las areas temáticas
        for (Obra obra : obras) {
            if (!areasTematicas.contains(obra.getAreaTematica())) {
                areasTematicas.add(obra.getAreaTematica());
            }
        }
        
        String[] edit = new String[nombreDeObras.size()];
        //edit[0] = "";
        for (int i =0; i < nombreDeObras.size(); i++) {
            edit[i] = nombreDeObras.get(i);
        }
        
        //guardo las areas temáticas
        String[] areas = new String[areasTematicas.size()];
       //areas[0] = ""; //primera posicion string vacio
        for (int i =0; i < areasTematicas.size(); i++) {
            areas[i] = areasTematicas.get(i);
        }

        ComboBoxTitulo.setModel(new javax.swing.DefaultComboBoxModel<>(edit));
        areaTematicaCB.setModel(new javax.swing.DefaultComboBoxModel<>(areas));

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxTitulo;
    private javax.swing.JTable TablaEjemplar;
    private javax.swing.JComboBox<String> areaTematicaCB;
    private javax.swing.JLabel areaTematicaLabel;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
